schema {
  query: Query
  mutation: Mutation
}

type CreateEvent {
  event: Event
  message: String
  success: Boolean
}

type CreateUser {
  user: User
  message: String
  success: Boolean
}

type DeleteEvent {
  message: String
  success: Boolean
}

type DeleteUser {
  message: String
  success: Boolean
}

type EditEvent {
  event: Event
  message: String
  success: Boolean
}

type EditUser {
  user: User
  message: String
  success: Boolean
}

type Event implements Node {
  uuid: ID!
  title: String!
  datePosted: String!
  location: String
  description: String
  organizerUuid: Int!
  organizer: User
  joinedUsers(before: String, after: String, first: Int, last: Int): UserConnection
  id: ID!
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
}

type EventConnectionsConnection {
  pageInfo: PageInfo!
  edges: [EventConnectionsEdge]!
}

type EventConnectionsEdge {
  node: Event
  cursor: String!
}

type EventEdge {
  node: Event
  cursor: String!
}

enum EventSortEnum {
  UUID_ASC
  UUID_DESC
  TITLE_ASC
  TITLE_DESC
  DATE_POSTED_ASC
  DATE_POSTED_DESC
  LOCATION_ASC
  LOCATION_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ORGANIZER_UUID_ASC
  ORGANIZER_UUID_DESC
}

type JoinEvent {
  event: Event
  user: User
  message: String
  success: Boolean
}

type LeaveEvent {
  event: Event
  user: User
  message: String
  success: Boolean
}

type Login {
  message: String
  success: Boolean
  accessToken: String
  user: User
}

type Mutation {
  createUser(email: String!, fname: String!, password: String!, surname: String!, username: String!): CreateUser
  loginUser(email: String, password: String!, username: String): Login
  editUser(email: String, fname: String, password: String, surname: String, username: String, uuid: Int!): EditUser
  deleteUser(uuid: Int!): DeleteUser
  createEvent(description: String!, organizerUuid: Int!, title: String!): CreateEvent
  editEvent(description: String, title: String, uuid: Int!): EditEvent
  joinEvent(eventUuid: Int!, userUuid: Int!): JoinEvent
  leaveEvent(eventUuid: Int!, userUuid: Int!): LeaveEvent
  deleteEvent(uuid: Int!): DeleteEvent
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  user(uuid: Int, username: String): User
  event(uuid: Int, title: String): Event
  allUsers(sort: [UserSortEnum] = [UUID_ASC], before: String, after: String, first: Int, last: Int): UserConnectionsConnection
  allEvents(sort: [EventSortEnum] = [UUID_ASC], before: String, after: String, first: Int, last: Int): EventConnectionsConnection
}

type User implements Node {
  uuid: ID!
  username: String!
  fname: String!
  surname: String!
  isVerified: Boolean
  profilePic: String
  email: String!
  password: String!
  createdEvents(before: String, after: String, first: Int, last: Int): EventConnection
  joinedEvents(before: String, after: String, first: Int, last: Int): EventConnection
  id: ID!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
}

type UserConnectionsConnection {
  pageInfo: PageInfo!
  edges: [UserConnectionsEdge]!
}

type UserConnectionsEdge {
  node: User
  cursor: String!
}

type UserEdge {
  node: User
  cursor: String!
}

enum UserSortEnum {
  UUID_ASC
  UUID_DESC
  USERNAME_ASC
  USERNAME_DESC
  FNAME_ASC
  FNAME_DESC
  SURNAME_ASC
  SURNAME_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  PROFILE_PIC_ASC
  PROFILE_PIC_DESC
  EMAIL_ASC
  EMAIL_DESC
  PASSWORD_ASC
  PASSWORD_DESC
}
